# projectile.hss

defineConstant, begin
    1500,projectile:speed
    300,projectile:lifetime
    1,projectile:playerdamage
    4000,projectile:knockback
end

script, createProjectile, spr, x, y, w, h, dir, spd=projectile:speed, friendly=false, begin
    variable(projectile, sprite, sl)

    projectile := createContainer(w, h)
    setHorizAnchor(projectile, edge:center)
    setVertAnchor(projectile, edge:middle)
    if(friendly) then(setParent(projectile, playerProjectileLayer))
    else(setParent(projectile, projectileLayer))
    sprite := loadAttackSprite(spr)
    setParent(sprite, projectile)
    centerSlice(sprite)
    createAnimation(sprite, 15, 5, true)
    sl := createContainer(0,0)      # subpixel data slice
    setSliceLookup(sl, sli:subpixel)
    setParent(sl, projectile)

    putSlice(projectile, x, y)
    putSliceSubpixel(projectile, x*1000, y*1000)

    setSliceExtra(projectile, extra0, dir)
    setSliceExtra(projectile, extra1, spd)
    setSliceExtra(projectile, extra2, projectile:lifetime)
end

script, updateProjectiles, begin
    variable(i)

    for(i, childCount(projectileLayer)--1, 0, -1) do(
        moveProjectile(sliceChild(projectileLayer, i), false)
    )

    for(i, childCount(playerProjectileLayer)--1, 0, -1) do(
        moveProjectile(sliceChild(playerProjectileLayer, i), true)
    )

    subscript, moveProjectile, sl, friendly, begin
        variable(hit, velocity, bearing, subX, subY)

        # Move by speed/direction
        velocity := getSliceExtra(sl, extra1)
        bearing := getSliceExtra(sl, extra0)
        subX := get_x_subpixels(velocity, bearing)
        subY := get_y_subpixels(velocity, bearing)

        # Check collision with player/enemy
        #hit := findCollidingSlice()
        if(friendly) then(
            # Player's bullet
            variable(j)
            for(j, 0, findCollidingSlice(lookupSlice(sl:walkaboutLayer), sl, getCount)--1) do(
                hit := findCollidingSlice(lookupSlice(sl:walkaboutLayer), sl, j)
                if(npcReferenceFromSlice(hit)) then(
                    # Damage enemy/npc
                    pushObject(hit, bearing, projectile:knockback)   # from movement.hss
                    stunEnemy(npcReferenceFromSlice(hit), player:rangedStun)
                    damageEnemy(npcReferenceFromSlice(hit), projectile:playerdamage)
                    freeSlice(sl)
                    exitScript()
                )
            )
        ) else(
            # Enemy's bullet
            hit := sliceCollide(player, sl)
            if(hit && getHeroStat(me, stat:Dodge) == 0) then(
                # Damage player
                if(getHeroStat(me, stat:Def) > 0) then(
                    pushObject(hit, bearing, projectile:knockback / 2)
                ) else(
                    pushObject(hit, bearing, projectile:knockback)
                    damagePlayer(2)
                )
                freeSlice(sl)
                exitScript()
            )
        )

        # Check collision with walls
        if(readPassBlock(sliceX(sl)/20, sliceY(sl)/20)) then(
            freeSlice(sl)
            exitScript()
        ) else(
            hit := checkWallCollisionX(sliceX(sl), sliceY(sl), sliceWidth(sl), sliceHeight(sl), subX/1000, subY/1000, 0)
            if(hit < subX/1000) then(
                subX := (hit * 1000) + (1000 * sign(subX))
            )
            hit := checkWallCollisionY(sliceX(sl), sliceY(sl), sliceWidth(sl), sliceHeight(sl), subX/1000, subY/1000, 0)
            if(hit < subY/1000) then(
                subY := (hit * 1000) + (1000 * sign(subY))
            )
        )

        # Tick down lifetime
        if(getSliceExtra(sl, extra2) <= 0) then(
            freeSlice(sl)
            exitScript()
        )
        setSliceExtra(sl, extra2, getSliceExtra(sl, extra2) -- 1)
        
        putSliceSubpixel(sl, sliceSubX(sl) + subX, sliceSubY(sl) + subY)
        putSlice(sl, sliceSubX(sl)/1000, sliceSubY(sl)/1000)
    end
end
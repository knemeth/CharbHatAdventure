# util.hss

# ========================================
# MATH
# ========================================

script, clampValue, val, mn, mx, begin
    # Takes val and constrains it to min and max
    if(val < mn) then(exitReturning(mn))
    elseif(val > mx) then(exitReturning(mx))
    else(exitReturning(val))
end

script, max, x, y, begin
    if(x >= y) then(exitReturning(x))
    if(y > x) then(exitReturning(y))
end

script, min, x, y, begin
    if(x <= y) then(exitReturning(x))
    if(y < x) then(exitReturning(y))
end

script, getDistance, x1, y1, x2, y2, begin
    exitReturning(sqrt((x2--x1)^2 + (y2--y1)^2))
end

# ========================================
# SLICES
# ========================================

script, updateNPCorHeroFromSlice, sl, begin
    variable (who)
    
    who := heroRankFromSlice(sl)
    if (who > -1) then (putHero(who, sliceX(sl), sliceY(sl)))
    who := npcReferenceFromSlice(sl)
    if (who <> 0) then (putNPC(who, sliceX(sl), sliceY(sl)))
end

script, npcIDFromSlice, sl, begin
    exitReturning(getNPCID(npcReferenceFromSlice(sl)))
end

script, sliceCX, sl, begin
    # get slice center x
    exitReturning(sliceX(sl) + (sliceWidth(sl)/2))
end

script, sliceCY, sl, begin
    # get slice center y
    exitReturning(sliceY(sl) + (sliceHeight(sl)/2))
end

script, setVisibility, sl, val, begin
    setSliceVisible(sl, val)
end

script, insertExtra, handle, slot, val, begin
    if(sliceExtraLength(handle) < slot+1) then(
        resizeSliceExtra(handle, slot+1)
    )
    setSliceExtra(handle, slot, val)
end
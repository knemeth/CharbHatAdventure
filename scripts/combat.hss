# combat.hss

defineConstant, begin
    8000,player:projectileSpeed
    40,player:reloadSpeed
    6,player:projectileSize
    30,enemy:flashFrames
    30,player:invisFrames
end

script, evaluateInput, begin
    variable(valid)
    # Check for melee attack
    if(usePress && playerState <> state:attack) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(else) valid := false
        )

        if(valid) then(
            newState(state:attack, player:attackSet, player:attackFrames)

            # make attack hitbox visible
            variable(attack, w, h, x, y)
            attack := lookupSlice(sli:attack, player)
            switch(heroDirection(me)) do(
                case(up) w := max(sliceWidth(attack), sliceHeight(attack)), h := min(sliceWidth(attack), sliceHeight(attack)), x := 0, y := 0--sliceHeight(player)
                case(down) w := max(sliceWidth(attack), sliceHeight(attack)), h := min(sliceWidth(attack), sliceHeight(attack)), x := 0, y := sliceHeight(player)
                case(left) w := min(sliceWidth(attack), sliceHeight(attack)), h := max(sliceWidth(attack), sliceHeight(attack)), x := 0--sliceWidth(player), y := 0
                case(right) w := min(sliceWidth(attack), sliceHeight(attack)), h := max(sliceWidth(attack), sliceHeight(attack)), x := sliceWidth(player), y := 0
            )
            setSliceSize(attack, w, h)
            putSlice(attack, x, y)
            setSliceVisible(attack, true)

            setTimer(timer:attack, player:attackFrames * player:animSpeed, 1, @returnToIdle)

            exitReturning(state:attack)
        )
    )

    # Check for shoot
    if(shootPress && getHeroStat(me, stat:Hits) > 0) then(
        switch(playerState) do(
            case(state:idle) valid := true 
            case(state:walk) valid := true 
            case(else) valid := false
        )

        if(valid) then(
            newState(state:shoot, player:shootSet, player:shootFrames)

            createProjectile(1, sliceX(player)+(sliceWidth(player)/2), sliceY(player)+(sliceHeight(player)/2), player:projectileSize, player:projectileSize, getSliceDir(player), player:projectileSpeed, true)

            setHeroStat(me, stat:Hits, getHeroStat(me, stat:Hits) -- 1)
            if(getHeroStat(me, stat:Hits) <= 0) then(
                setTimer(timer:reload, player:reloadSpeed, 1, @reloadAmmo)
            )

            setTimer(timer:attack, player:shootFrames * player:animSpeed, 1, @returnToIdle)
        )
    )

    # Check for dodge roll
    if(shiftPress && getHeroStat(me, stat:SP) > 0) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(state:shoot) valid := true
            case(else) valid := false
        )

        if(valid) then(
            newState(state:roll, player:rollSet, player:rollFrames)

            if(getHeroStat(me, stat:dodge) < player:rollDistance) then(
                setHeroStat(me, stat:dodge, player:rollDistance)
            )
            setHeroStat(me, stat:SP, getHeroStat(me, stat:SP) -- 1)  # Reduce stamina
            
            setTimer(timer:stamina, getHeroStat(me, stat:MP~), 1, @recoverStamina)
            setTimer(timer:roll, player:rollDistance, 1, @returnToIdle)

            exitReturning(state:roll)
        )
    ) 
    
    # Check for block
    if(cancelPress) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(state:shoot) valid := true
            case(else) valid := false
        )

        if(valid) then(
            newState(state:block, player:blockSet, player:blockFrames)
            # Check for perfect block here
            # -----
            setHeroStat(me, stat:Def, 50, maximumStat)
            setTimer(timer:block, player:blockTime, 1, @returnToIdle)

            exitReturning(state:block)
        )
    )

    subscript, newState, state, set, frames, begin
        playerState := state
        playerSpriteset := set
        playerFrames := frames
        setSliceExtra(getHeroSprite(me), extra0, 0)     # Reset animation timer
    end
end

script, returnToIdle, begin
    playerState := state:idle 
    playerSpriteset := player:idleSet
    playerSpriteset := player:idleFrames

    setHeroStat(me, stat:Def, 0, maximumStat)
    setSliceExtra(getHeroSprite(me), extra0, 0)
    setSliceVisible(lookupSlice(sli:attack, player), false)
end

script, reloadAmmo, begin
    setHeroStat(me, stat:Hits, getHeroStat(me, stat:Hits, maximumStat))
end

# Damage
# ==============================

script, damagePlayer, amount, begin
    setHeroStat(me, stat:HP, amount)
    setHeroStat(me, stat:dodge, player:invisFrames)

    if(getHeroStat(me, stat:HP) <= 0) then(
        # Die
        resetGame()
    )
end

script, damageEnemy, ref, amount, begin
    variable(sl, current)

    if(getNPCID(ref) == -1) then(exitScript())

    sl := getNPCSprite(ref)
    current := getSliceExtra(sl, extra2)

    setSliceExtra(sl, extra2, current -- amount)
    setSliceExtra(sl, extra1, enemy:flashFrames)

    if(getSliceExtra(sl, extra2) <= 0) then(
        # Die
        
        # VFX
        variable(vfx, sli, x, y)
        vfx := loadHeroSprite(0)
        setHorizAnchor(vfx, edge:center)
        setVertAnchor(vfx, edge:middle)
        setParent(vfx, fxLayer)
        sli := getNPCSlice(ref)
        x := sliceX(sli) + (sliceWidth(sli)/2)
        y := sliceY(sli) + (sliceHeight(sli)/2)
        putSlice(vfx, x, y)
        createAnimation(vfx, 32, 4)

        destroyNPC(ref)
        exitScript()
    )
end
# combat.hss

defineConstant, begin
    8000,player:projectileSpeed
    90,player:reloadSpeed
    8,player:projectileSize
    30,enemy:flashFrames
    30,player:invisFrames
    2,player:meleeDamage
    10000,player:knockback
    30,player:meleeStun
    10,player:rangedStun
    25,player:blockStun
end

script, evaluateInput, begin
    variable(valid)

    if(controlsSuspended) then(
        if(escPress && topMenu) then(
            closeMenu(topMenu, true)
        )
        exitScript()
    )

    if(escPress && topMenu == false) then(
        controlsSuspended := true
        openMenu(0)
    )
    # Check for melee attack
    if(usePress) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(else) valid := false
        )

        if(currentTextbox <> -1) then(
            advanceTextbox()
            exitScript()
        )
        variable(ref)
        ref := nextNPCReference()
        while(ref) do(
            if(getNPCPool(ref) == pool:local 
            && readNPC(ref, npcStat:activation) == npcActivation:use
            && sliceCollide(getNPCSlice(ref), lookupSlice(sli:attack, player))) 
            then(
                useNPC(ref)
                tbSource := ref
                valid := false
                break
            )
            ref := nextNPCReference(ref)
        )

        if(valid) then(
            newState(state:attack, player:attackSet, player:attackFrames)

            # make attack hitbox visible
            variable(attack, w, h, x, y, vfx)
            attack := lookupSlice(sli:attack, player)
            switch(heroDirection(me)) do(
                case(up) do(
                    w := max(sliceWidth(attack), sliceHeight(attack))
                    h := min(sliceWidth(attack), sliceHeight(attack))
                    x := 0
                    y := 0--(sliceHeight(player)/2)--(h/2)
                    vfx := loadHeroSprite(7)
                )
                case(down) do(
                    w := max(sliceWidth(attack), sliceHeight(attack))
                    h := min(sliceWidth(attack), sliceHeight(attack))
                    x := 0
                    y := (sliceHeight(player)/2)+(h/2)
                    vfx := loadHeroSprite(7)
                    vertFlipSprite(vfx, true)
                )
                case(left) do(
                    w := min(sliceWidth(attack), sliceHeight(attack))
                    h := max(sliceWidth(attack), sliceHeight(attack))
                    x := 0--(sliceWidth(player)/2)--(w/2)
                    y := 0
                    vfx := loadHeroSprite(8)
                    horizFlipSprite(vfx, true)
                )
                case(right) do(
                    w := min(sliceWidth(attack), sliceHeight(attack))
                    h := max(sliceWidth(attack), sliceHeight(attack))
                    x := (sliceWidth(player)/2)+(w/2)
                    y := 0
                    vfx := loadHeroSprite(8)
                )
            )

            playerAnimSpeed := 2

            setParent(vfx, player)
            centerSlice(vfx)
            putSlice(vfx, x, y)
            createAnimation(vfx, playerAnimSpeed*6, playerAnimSpeed)

            setTimer(timer:attack, player:windupFrames * playerAnimSpeed, 1, @attackImpact)
            setTimerArgs(timer:attack, player, player:attackFrames -- 2)

            exitReturning(state:attack)
        )
    )

    # Check for shoot
    if(shootPress && getHeroStat(me, stat:Hits) > 0) then(
        switch(playerState) do(
            case(state:idle) valid := true 
            case(state:walk) valid := true 
            case(else) valid := false
        )

        if(valid) then(
            newState(state:shoot, player:shootSet, player:shootFrames)

            createProjectile(2, sliceX(player)+(sliceWidth(player)/2), sliceY(player)+(sliceHeight(player)/2), player:projectileSize, player:projectileSize, getSliceDir(player), player:projectileSpeed, true)

            setHeroStat(me, stat:Hits, getHeroStat(me, stat:Hits) -- 1)
            if(getHeroStat(me, stat:Hits) <= 0) then(
                setTimer(timer:reload, player:reloadSpeed, 1, @reloadAmmo)
            )

            playSound(sfx:Throw+random(0,2), false, true)

            setTimer(timer:attack, player:shootFrames * playerAnimSpeed, 1, @returnToIdle)
        )
    ) elseif(shootPress) then(
        playSound(sfx:NoAmmo, false, true)
    )

    # Check for dodge roll
    if(shiftPress && getHeroStat(me, stat:SP) > 0) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(state:shoot) valid := true
            case(else) valid := false
        )

        if(valid) then(
            newState(state:roll, player:rollSet, player:rollFrames)

            playerAnimSpeed := 3

            if(getHeroStat(me, stat:dodge) < player:rollDistance) then(
                setHeroStat(me, stat:dodge, player:rollDistance)
            )
            setHeroStat(me, stat:SP, getHeroStat(me, stat:SP) -- 1)  # Reduce stamina

            playSound(sfx:Dash, false, true)
            
            setTimer(timer:stamina, getHeroStat(me, stat:MP~), 1, @recoverStamina)
            setTimer(timer:roll, player:rollDistance, 1, @returnToIdle)

            exitReturning(state:roll)
        )
    ) 
    
    # Check for block
    if(cancelPress) then(
        switch(playerState) do(
            case(state:idle) valid := true
            case(state:walk) valid := true
            case(state:shoot) valid := true
            case(else) valid := false
        )

        if(valid) then(
            newState(state:block, player:blockSet, player:blockFrames)
            # Check for perfect block here
            # -----
            setHeroStat(me, stat:Def, 50, maximumStat)
            setHeroStat(me, stat:Def, 50)
            setTimer(timer:block, player:blockTime, 1, @returnToIdle)

            exitReturning(state:block)
        )
    )

    subscript, newState, state, set, frames, begin
        playerState := state
        playerSpriteset := set
        playerFrames := frames
        setSpriteSetNumber(getHeroSprite(me), set)
        setSliceExtra(getHeroSprite(me), extra0, 0)     # Reset animation timer
    end
end

script, returnToIdle, begin
    playerAnimSpeed := player:animSpeed
    playerState := state:idle 
    playerSpriteset := player:idleSet
    playerFrames := player:idleFrames

    setHeroStat(me, stat:Def, 0)
    setSliceExtra(getHeroSprite(me), extra0, 0)
    setSliceVisible(lookupSlice(sli:attack, player), false)
end

script, reloadAmmo, begin
    setHeroStat(me, stat:Hits, getHeroStat(me, stat:Hits, maximumStat))
    playSound(sfx:reload, false, true)
end

script, attackImpact, sl, frames, begin
    # Only functional for player
    variable(attack, vfx)

    attack := lookupSlice(sli:attack, sl)
    setSliceVisible(attack, true)

    playSound(sfx:melee+random(0,2), false, true)

    setTimer(timer:attack, frames * playerAnimSpeed, 1, @returnToIdle)
end

# Combat Data
# ===============================

script, getAttackDelay, sl, begin
    variable(child)

    child := lookupSlice(sli:combat, sl)
    exitReturning(getSliceExtra(child, extra0))
end

script, setAttackDelay, sl, v, begin
    variable(child)

    child := lookupSlice(sli:combat, sl)
    setSliceExtra(child, extra0, v)
end

# Damage
# ==============================

script, damagePlayer, amount, begin
    if(getHeroStat(me, stat:Def) > 0 || controlsSuspended) then(
        # BLOCKED
        exitScript()
    )
    setHeroStat(me, stat:HP, getHeroStat(me, stat:HP) -- amount)
    setHeroStat(me, stat:dodge, player:invisFrames)

    playSound(sfx:hit+random(0,2), false, true)

    if(getHeroStat(me, stat:HP) <= 0) then(
        variable(i, sl, vfx, ref)
        # Die
        updateHud()
        
        for(i, 0, childCount(lookupSlice(sl:maproot))--1) do(
            sl := sliceChild(lookupSlice(sl:maproot), i)
            if(sliceIsMapLayer(sl)) then(
                setSliceVisible(sl, false)
            )
        )
        setSliceVisible(pickupLayer, false)
        setSliceVisible(aoeLayer, false)
        setSliceVisible(projectileLayer, false)
        ref := nextNPCReference()
        while(ref) do(
            if(getNPCPool(ref) == pool:global) then(
                destroyNPC(ref)
            )
            ref := nextNPCReference(ref)
        )
        controlsSuspended := true
        playerSpriteset := player:deadSet
        playerFrames := player:deadFrames
        setSpriteSetNumber(getHeroSprite(me), player:deadSet)
        playSound(sfx:Death, false, true)
        stopSong()
        wait(60)
        showTextbox(23)
        waitForTextbox()

        setSliceVisible(getHeroSprite(me), false)

        playSound(sfx:DeathEcho, false, true)
        for(i, 0, 7) do(
            vfx := loadAttackSprite(5)
            setParent(vfx, fxLayer)
            centerSlice(vfx)
            putSlice(vfx, sliceCX(player), sliceCY(player))
            createParticle(vfx, 50, 4000, i*(360/8), 20)
        )
        
        setTimer(timer:cutscene, 180, 1, @death)
    )
end

script, damageEnemy, ref, amount, begin
    variable(sl, current)

    if(getNPCID(ref) == -1) then(exitScript())

    sl := getNPCSlice(ref)
    vfx := createText()
    setParent(vfx, fxLayer)
    clearString(3)
    appendNumber(3, amount)
    setSliceText(vfx, 3)
    setTextColor(vfx, 13)
    setOutline(vfx, true)
    centerSlice(vfx)
    putSlice(vfx, sliceCX(sl), sliceCY(sl) -- 10)
    createParticle(vfx, 16, 2000, 340 + random(0, 60), 10, true)

    sl := getNPCSprite(ref)
    current := getSliceExtra(sl, extra2)

    setSliceExtra(sl, extra2, current -- amount)
    setSliceExtra(sl, extra1, enemy:flashFrames)

    playSound(sfx:beast+random(0,3), false, true)

    if(getSliceExtra(sl, extra2) <= 0) then(
        # Die
        
        # VFX
        variable(vfx, sli, x, y)
        vfx := loadHeroSprite(0)
        setHorizAnchor(vfx, edge:center)
        setVertAnchor(vfx, edge:middle)
        setParent(vfx, fxLayer)
        sli := getNPCSlice(ref)
        x := sliceX(sli) + (sliceWidth(sli)/2)
        y := sliceY(sli) + (sliceHeight(sli)/2)
        putSlice(vfx, x, y)
        createAnimation(vfx, 32, 4)

        createRandomPickup(sliceCX(sli), sliceCY(sli))

        switch(getNPCID(ref)) do(
            case(enemy:slime) minionCount -= 1
            case(enemy:charvile) charvileKilled()
        )

        destroyNPC(ref)
        exitScript()
    )
end

# Collisions
# =================================

script, meleeCollisions, begin
    variable(i, attack, hit, ref, sl)

    # Player Melee
    attack := lookupSlice(sli:attack, player)
    if(getSliceVisible(attack)) then(
        for(i, findCollidingSlice(lookupSlice(sl:walkaboutLayer), attack, getCount, false, true)--1, 0, -1) do(
            hit := findCollidingSlice(lookupSlice(sl:walkaboutLayer), attack, i, false, true)
            ref := npcReferenceFromSlice(hit)
            if(ref && getNPCPool(ref) == pool:global && getEnemyHit(ref) == false) then(
                pushObject(hit, get_bearing(sliceCX(player), sliceCY(player), sliceCX(hit), sliceCY(hit)), projectile:knockback)   # from movement.hss
                setEnemyHit(ref, true)
                stunEnemy(ref, player:meleeStun)
                damageEnemy(ref, player:meleeDamage + random(-1,1))
            )
        )
    ) else(
        # Mark all enemies as not yet hit
        ref := nextNPCReference()
        while(ref) do(
            setEnemyHit(ref, false)
            ref := nextNPCReference(ref)
        )
    )

    # Enemy melee
    ref := nextNPCReference()
    while(ref) do(
        if(getNPCPool(ref) == pool:global) then(
            sl := lookupSlice(sli:attack, getNPCSlice(ref))
            if(getSliceVisible(sl) && getHeroStat(me, stat:dodge) == 0 && sliceCollide(sl, player)) then(
                damagePlayer(3)
            )
        )
        ref := nextNPCReference(ref)
    )
end
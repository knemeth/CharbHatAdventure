# Charbile's Hatful Adventure
# main.hss

include,.\Util\array.hss
include,.\Util\util.hss
include,.\Util\geometry.hss
include,.\Util\effects.hss
include,.\Util\input.hss
include,animate.hss
include,combat.hss
include,projectile.hss
include,movement.hss
include,enemy.hss
include,ui.hss
include,pickup.hss

globalVariable, begin
    # Effects
    0,animHandles
    1,particleHandles
    2,emitterHandles
    3,projectileLayer
    4,playerProjectileLayer
    5,pickupLayer
    6,fxLayer
    # Player values
    10,player
    11,playerSpriteset
    12,playerFrames
    13,playerState
    14,joyX
    15,joyY
    # UI
    30,hud
    31,titleScreenHud
end

defineConstant, begin
    10,player:width
    6,player:height
    5,player:animSpeed
    31,player:idleSet
    4,player:idleFrames
    20,player:walkSet
    4,player:walkFrames
    24,player:rollSet
    4,player:rollFrames
    16,player:rollDistance
    2,player:windupFrames
    20,player:attackSet
    3,player:attackFrames
    20,player:shootSet
    2,player:shootFrames
    28,player:blockSet
    3,player:blockFrames
    30,player:blockTime

    0,state:idle
    1,state:walk
    2,state:roll
    3,state:block
    4,state:attack
    5,state:shoot

    100,sli:attack

    0,timer:stamina
    1,timer:block
    2,timer:attack
    3,timer:reload
    4,timer:roll
end

plotscript, initGame, begin
    suspendPlayer
    initMouse

    wait

    # Init player
    player := getHeroSlice(me)
    initObject(player, player:width, player:height, player:width * 2, player:height * 3)
    playerState := state:idle
    playerSpriteset := player:walkSet
    playerFrames := player:walkFrames

    # hud
    hud := loadSliceCollection(0)

    animHandles := createContainer()
    particleHandles := createContainer()
    emitterHandles := createContainer()
    fxLayer := createContainer()
    setParent(fxLayer, lookupSlice(sl:mapOverlay))
    projectileLayer := createContainer()
    setParent(projectileLayer, lookupSlice(sl:mapOverlay))
    playerProjectileLayer := createContainer()
    setParent(playerProjectileLayer, lookupSlice(sl:mapOverlay))
    pickupLayer := lookupSlice(sl:mapLayer1)

    while(true) do(
        primaryLoopContents()
        wait
    )
end

plotscript, titleScreen, begin
    suspendPlayer
    titleScreenHud := loadSliceCollection(1)

    waitForKey(anyKey)
    fadeScreenOut()
    wait
    freeSlice(titleScreenHud)
    wait
    fadeScreenIn()

    initGame()
end

script, primaryLoopContents, begin
    # These are commands that should be run at all times, regardless of game state
    # Run at the beginning of any continuous while loop

    # Effects
    animateEffects()
    moveParticles()
    processEmitters()
    updateProjectiles()
    pickupEachtick()

    # Player
    evaluateInput()
    movePlayer()
    animatePlayer()

    # Enemies
    enemyEachtick()
    animateNPCs()

    meleeCollisions()

    # UI
    updateHud()

    # Debug
    clearString(1), appendNumber(1, getHeroStat(me, stat:Def))
    showStringAt(1,0,100)
    showStringAt(2,0,110)

    resetInputs()
end

script, initObject, handle, width, height, atkWidth, atkHeight, begin
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )

    if(childCount(handle) == 1) then(
        # Only has a sprite child, has not been initialized
        variable(sl, spr)
        sl := firstChild(handle)
        setHorizAlign(sl, edge:center)
        setHorizAnchor(sl, edge:center)
        sl := createRect(atkWidth, atkHeight, -1)
        setParent(sl, handle)
        setSliceVisible(sl, false)
        setRectBorder(sl, border:none)
        setRectTrans(sl, trans:hollow)
        centerSlice(sl)
        setSliceLookup(sl, sli:attack)
        sl := createContainer(0,0)      # stores combat data
        setParent(sl, handle)
        sl := createContainer(0,0)      # stores subpixel data
        setParent(sl, handle)

        sl := createContainer(0,0)      # stores animation data
        setParent(sl, firstSpriteChild(handle))
        setSliceExtra(sl, extra0, getSpriteSetNumber(firstSpriteChild(handle)))
    )

    #putSlice(handle, sliceCX(handle) -- (width/2), sliceCY(handle) -- (height/2))
    setSliceSize(handle, width, height)
    putSliceSubpixel(handle, sliceX(handle)*1000, sliceY(handle)*1000)
end

plotscript, mapAutorun, begin
    # Default autorun commands
    variable(ref)

    ref := nextNPCReference()
    while(ref) do(
        initObject(getNPCSlice(ref), getEnemyWidth(ref), getEnemyHeight(ref), getEnemyAttackWidth(ref), getEnemyAttackHeight(ref))
        ref := nextNPCReference(ref)
    )
    initEnemies()
end
# Charbile's Hatful Adventure
# main.hss

include,.\Util\array.hss
include,.\Util\util.hss
include,.\Util\geometry.hss
include,.\Util\effects.hss
include,.\Util\input.hss
include,animate.hss
include,combat.hss
include,projectile.hss
include,movement.hss
include,enemy.hss
include,ui.hss
include,pickup.hss
include,npc.hss

globalVariable, begin
    # Effects
    0,animHandles
    1,particleHandles
    2,emitterHandles
    3,projectileLayer
    4,playerProjectileLayer
    5,pickupLayer
    6,fxLayer
    7,aoeLayer
    # Player values
    10,player
    11,playerSpriteset
    12,playerFrames
    13,playerState
    14,joyX
    15,joyY
    16,playerAnimSpeed
    17,controlsSuspended
    # UI
    30,hud
    31,titleScreenHud
    # gameplay
    50,minionCount
    51,gamePaused
end

defineConstant, begin
    10,player:width
    6,player:height
    5,player:animSpeed
    31,player:idleSet
    4,player:idleFrames
    20,player:walkSet
    4,player:walkFrames
    24,player:rollSet
    6,player:rollFrames
    18,player:rollDistance
    2,player:windupFrames
    36,player:attackSet
    6,player:attackFrames
    20,player:shootSet
    2,player:shootFrames
    42,player:blockSet
    3,player:blockFrames
    30,player:blockTime
    30,player:deadSet
    1,player:deadFrames
    30,player:attackWidth
    20,player:attackHeight

    0,state:idle
    1,state:walk
    2,state:roll
    3,state:block
    4,state:attack
    5,state:shoot

    100,sli:attack
    101,sli:combat
    102,sli:subpixel
    103,sli:animation
    104,sli:ai
    105,sli:exclamation
    106,sli:charmileBody
    107,sli:charmileButt

    0,timer:stamina
    1,timer:block
    2,timer:attack
    3,timer:reload
    4,timer:roll
    5,timer:beat
    6,timer:cutscene
    7,timer:charvileUndulate
    8,timer:boss
    9,timer:cutsceneBars
end

script, initGame, begin
    suspendPlayer
    initMouse

    wait

    # Init player
    player := getHeroSlice(me)
    initObject(player, player:width, player:height, player:attackWidth, player:attackHeight)
    playerState := state:idle
    playerSpriteset := player:walkSet
    playerFrames := player:walkFrames
    playerAnimSpeed := player:animSpeed

    # hud
    hud := loadSliceCollection(0)

    animHandles := createContainer()
    particleHandles := createContainer()
    emitterHandles := createContainer()
    fxLayer := createContainer()
    setParent(fxLayer, lookupSlice(sl:mapOverlay))
    projectileLayer := createContainer()
    setParent(projectileLayer, lookupSlice(sl:mapOverlay))
    playerProjectileLayer := createContainer()
    setParent(playerProjectileLayer, lookupSlice(sl:mapOverlay))
    pickupLayer := lookupSlice(sl:mapLayer3)
    aoeLayer := createContainer()
    setParent(aoeLayer, lookupSlice(sl:mapOverlay))

    # NPCs
    variable(ref, npcSl, sl)

    ref := nextNPCReference()
    while(ref) do(
        # Exclamation point for talkable npcs
        if(getNPCPool(ref) == pool:local && readNPC(ref, npcStat:activation) == npcActivation:use) then(
            npcSl := getNPCSlice(ref)
            sl := loadHeroSprite(9)
            setSliceLookup(sl, sli:exclamation)
            setParent(sl, npcSl)
            realignSlice(sl, edge:center, edge:top, edge:middle, edge:bottom)
            setSliceVisible(sl, false)
            createAnimation(sl, 40, 5, true)
        )
        ref := nextNPCReference(ref)
    )
    charmileInit()
end

script, startGame, begin
    wait
    fadeScreenIn()

    while(true) do(
        primaryLoopContents()
        wait
    )
end

plotscript, quitGame, begin
    gameOver()
end

plotscript, death, begin
    fadeScreenOut()
    wait(10)
    resetGame()
end

plotscript, closeMainMenu, begin
    controlsSuspended := false
end

plotscript, titleScreen, begin
    titleScreenHud := loadSliceCollection(2)
    
    initGame()

    sliceToFront(titleScreenHud)
    
    variable(menu, flash, flashTimer, flashDuration, clouds, i, j, cloud, portrait, newPortrait, portraitTimer)
    menu := openMenu(1)
    flash := lookupSlice(sli:titleBg)
    flashDuration := 100
    clouds := lookupSlice(sli:clouds)

    while(menuIsOpen(menu)) do(
        # lightning
        flashTimer += 1
        if(flashTimer > flashDuration) then(
            if(getSliceVisible(flash)) then(
                setSliceVisible(flash, false)
                flashDuration := random(100, 300)
            ) else(
                setSliceVisible(flash, true)
                flashDuration := random(8, 24)
                dissolveSprite(flash, dissolve:flicker, flashDuration)
            )
            flashTimer := 0
        )
        # clouds
        for(i, 0, childCount(clouds)--1) do(
            for(j, 0, childCount(sliceChild(clouds, i))--1) do(
                cloud := sliceChild(sliceChild(clouds, i), j)
                if(sliceX(cloud) >= 400) then(
                    setSliceX(cloud, -400 + sliceX(sliceChild(sliceChild(clouds, i), (j+1),mod,2)))
                    if(j == 0) then(
                        setSliceX(cloud, sliceX(cloud)+getSliceExtra(cloud, extra0))
                    )
                ) else(
                    setSliceX(cloud, sliceX(cloud)+getSliceExtra(cloud, extra0))
                )
            )
        )
        # portrait
        portraitTimer += 1
        if(portraitTimer > 200) then(
            portrait := lookupSlice(sli:portrait)
            newPortrait := cloneSlice(portrait)
            if(getSpriteSetNumber(newPortrait) == 4) then(
                setSpriteSetNumber(newPortrait, 1)
            ) else(
                setSpriteSetNumber(newPortrait, getSpriteSetNumber(newPortrait)+1)
            )
            createParticle(portrait, 30, 2000, 90, 10, false, dissolve:fade)
            dissolveSprite(newPortrait, dissolve:fade, 60, 0, true)
            portraitTimer := 0
        )
        primaryLoopContents()
        wait(1)
    )

    fadeScreenOut()
    wait
    freeSlice(titleScreenHud)
    
    startGame()
end

script, primaryLoopContents, begin
    # These are commands that should be run at all times, regardless of game state
    # Run at the beginning of any continuous while loop

    # UI
    updateHud()

    # Player
    evaluateInput()
    if(gamePaused) then(
        resetInputs()
        exitScript()
    )
    movePlayer()
    animatePlayer()

    # Enemies
    enemyEachtick()
    animateNPCs()

    meleeCollisions()
    processAOE()

    # Effects
    animateEffects()
    moveParticles()
    processEmitters()
    updateProjectiles()
    pickupEachtick()
    charmileUpdate()

    # Debug
    showStringAt(1,0,100)
    showStringAt(2,0,110)

    resetInputs()
end

script, initObject, handle, width, height, atkWidth, atkHeight, begin
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )

    if(childCount(handle) == 1) then(
        # Only has a sprite child, has not been initialized
        variable(sl)
        sl := firstChild(handle)
        setHorizAlign(sl, edge:center)
        setHorizAnchor(sl, edge:center)
        sl := createRect(atkWidth, atkHeight, -1)
        setParent(sl, handle)
        setSliceVisible(sl, false)
        setRectBorder(sl, border:none)
        setRectTrans(sl, trans:hollow)
        centerSlice(sl)
        setSliceLookup(sl, sli:attack)
        sl := createContainer(0,0)      # stores combat data
        setParent(sl, handle)
        setSliceLookup(sl, sli:combat)
        sl := createContainer(0,0)      # stores subpixel data
        setParent(sl, handle)
        setSliceLookup(sl, sli:subpixel)

        sl := createContainer(0,0)      # stores animation data
        setParent(sl, firstSpriteChild(handle))
        setSliceLookup(sl, sli:animation)
        setSliceExtra(sl, extra0, getSpriteSetNumber(firstSpriteChild(handle)))

        if(npcReferenceFromSlice(handle)) then(
            sl := createContainer()
            setParent(sl, handle)
            setSliceLookup(sl, sli:ai)
        )
    )

    #putSlice(handle, sliceCX(handle) -- (width/2), sliceCY(handle) -- (height/2))
    setSliceSize(handle, width, height)
    putSliceSubpixel(handle, sliceX(handle)*1000, sliceY(handle)*1000)
end

plotscript, mapAutorun, begin
    # Default autorun commands
    variable(ref, npcSl, sl)

    ref := nextNPCReference()
    while(ref) do(
        if(getNPCPool(ref) == pool:global) then(
            initObject(getNPCSlice(ref), getEnemyWidth(ref), getEnemyHeight(ref), getEnemyAttackWidth(ref), getEnemyAttackHeight(ref))
            if(getNPCID(ref) == enemy:charvile) then(
                setSliceVisible(getNPCSlice(ref), false)
            )
        )
        
        ref := nextNPCReference(ref)
    )

    initEnemies()
end
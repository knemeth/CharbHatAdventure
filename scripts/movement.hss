# movement.hss

defineConstant, begin
    500,player:accel
    2500,player:speed
    0,player:friction
    500,axis:deadZone
end

script, movePlayer, begin
    variable(oldBearing, velocity, subX, subY, bearing)

    oldBearing := getSliceDir(player)

    joyX := joystickAxis(axis:X, player:speed)
    joyY := joystickAxis(axis:Y, player:speed)
    if(abs(joyX) < axis:deadZone) then(joyX := 0)
    if(abs(joyY) < axis:deadZone) then(joyY := 0)

    if(joyX == 0 && joyY == 0) then(
        # Keyboard controls
        if(wantLeft) then(joyX := 0--player:speed)
        elseif(wantRight) then(joyX := player:speed)
        if(wantUp) then(joyY := 0--player:speed)
        elseif(wantDown) then(joyY := player:speed)
    )

    bearing := get_bearing(0, 0, joyX, joyY)
    if(bearing <> 0 || joyX <> 0 || joyY <> 0) then(
        # Only update direction if moving
        setSliceDir(player, bearing)
        if(bearing > 315) then(setHeroDirection(me, up))
        elseif(bearing > 225) then(setHeroDirection(me, left))
        elseif(bearing > 135) then(setHeroDirection(me, down))
        elseif(bearing > 45) then(setHeroDirection(me, right))
        else(setHeroDirection(me, up))
    )    
    
    velocity := clampValue(abs(joyX) + abs(joyY), 0--player:speed, player:speed)

    if(playerState == state:attack) then(
        velocity := clampValue(velocity, 0--(player:speed / 2), player:speed / 2) 
    ) elseif(playerState == state:roll) then(
        velocity := player:speed * 2
        bearing := oldBearing
        setHeroStat(me, stat:dodge, getHeroStat(me, stat:dodge) -- 1)
        if(getHeroStat(me, stat:dodge) == 0) then(
            returnToIdle()
        )
    ) elseif(playerState == state:block || lockPress) then(
        velocity := 0
    )

    if(joyX == 0 && joyY == 0) then(
        velocity := velocity / 2        # deceleration
    )

    subX := get_x_subpixels(velocity, bearing)
    subY := get_y_subpixels(velocity, bearing)

    if(joyX <> 0 && joyY <> 0 && playerState == state:idle) then(
        playerState := state:walk
        playerSpriteset := player:walkSet
        playerFrames := player:walkFrames
        setSliceExtra(getHeroSprite(me), extra0, 0)
    )

    # Collisions
    # ================
    # Pickups
    variable(num, hit)

    for(num, findCollidingSlice(pickupLayer, player, getCount, false)--1, 0, -1) do(
        hit := findCollidingSlice(pickupLayer, player, num, false)
        runScriptByID(getSliceExtra(hit, extra0))
        freeSlice(hit)
    )

    setSliceV(player, velocity)
    applyMove(player, subX, subY)
end

script, recoverStamina, begin
    setHeroStat(me, stat:SP, getHeroStat(me, stat:SP) + 1)
    if(getHeroStat(me, stat:SP) < getHeroStat(me, stat:SP, maximumStat)) then(
        setTimer(timer:stamina, getHeroStat(me, stat:MP~), 1, @recoverStamina)
    )
end

script, knockback, target, source, wt, begin
    # target: slice being knocked back 
    # source: slice knocking back
    # wt: weight of knockback
    variable(bearing, subX, subY)


end

script, applyMove, handle, subX, subY, begin
    # Called in movePlayer and moveEnemies
    # Moves a slice based on relative x and y
    variable(x, y, w, h, hitX, hitY)

    x := sliceX(handle)
    y := sliceY(handle)
    w := sliceWidth(handle)
    h := sliceHeight(handle)

    # round subX,subY down to X000 if a wall is hit
    hitX := checkWallCollisionX(x, y, w, h, subX/1000, subY/1000, player:friction)
    if(hitX < subX/1000) then(
        subX := hitX * 1000
    )
    hitY := checkWallCollisionY(x, y, w, h, subX/1000, subY/1000, player:friction)
    if(hitY < subY/1000) then(
        subY := hitY * 1000
    )

    # Store subpixel position
    putSliceSubpixel(handle, sliceSubX(handle)+subX, sliceSubY(handle)+subY)

    moveSliceWithWallchecking(handle, subX/1000, subY/1000, player:friction)
    updateNPCorHeroFromSlice(handle)
end

# ========================================
# GETTING/SETTING MOVEMENT DATA
# ========================================

script, getSliceV, handle, begin
    # Sets velocity by slice handle, whether hero or npc
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )
    exitReturning(getSliceExtra(handle, extra0))
end

script, setSliceV, handle, v, begin
    # Sets velocity by slice handle, whether hero or npc
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )
    setSliceExtra(handle, extra0, v)
end

script, getSliceDir, handle, begin
    # gets the 360 degree bearing of a slice
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )
    exitReturning(getSliceExtra(handle, extra2))
end

script, setSliceDir, handle, v, begin
    # sets the 360 degree bearing of a slice
    if(heroRankFromSlice(handle) == -1 && npcReferenceFromSlice(handle) == 0) then(
        exitScript() # slice is not a hero or npc
    )
    setSliceExtra(handle, extra2, v)
end

script, sliceSubX, handle, begin
    # Gets the subpixel X position, stored in the first child of the handle
    exitReturning(sliceX(lastChild(handle)))
end

script, sliceSubY, handle, begin
    # Gets the subpixel Y position, stored in the first child of the handle
    exitReturning(sliceY(lastChild(handle)))
end

script, setSliceSubX, handle, v, begin
    # Gets the subpixel X position, stored in the first child of the handle
    exitReturning(setSliceX(lastChild(handle), v))
end

script, setSliceSubY, handle, v, begin
    # Gets the subpixel Y position, stored in the first child of the handle
    exitReturning(setSliceY(lastChild(handle), v))
end

script, putSliceSubpixel, handle, subX, subY, begin
    # Sets the subpixel position, which are pixels * 1000
    putSlice(lastChild(handle), subX, subY)
end

script, getSliceMoving, handle, begin
    # Checks whether the slice is moving based on their xv and yv
    if(getSliceV(handle) <> 0) then(exitReturning(true))

    exitReturning(false)
end